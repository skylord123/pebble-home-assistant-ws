<!doctype html>
<html lang="en">
<head>
	<title>Home Assistant WS Config</title>
	<script src="https://use.fontawesome.com/3a291b24ff.js"></script>
	<link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
		<symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
			<path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
		</symbol>
		<symbol id="info-fill" fill="currentColor" viewBox="0 0 16 16">
			<path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>
		</symbol>
		<symbol id="exclamation-triangle-fill" fill="currentColor" viewBox="0 0 16 16">
			<path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
		</symbol>
	</svg>
	<style>
		button .test-btn-loading {
			display: none;
		}
		button[disabled] .test-btn-loading {
			display: inline-block;
		}

		button .btn-text {
			display: inline-block;
		}
		button[disabled] .btn-text {
			display: none;
		}

		.timeline-token {
			word-break: break-all;
			background-color: #f8f9fa;
			padding: 10px;
			border-radius: 4px;
			border: 1px solid #ced4da;
			margin-bottom: 10px;
			cursor: text;
		}
	</style>
</head>
<body>
<div class="container">
	<form id="watch-config-form">
		<div class="row">
			<div class="col-12 text-center">
				<h3 class="font-weight-bold mt-3">Home Assistant WS Config</h3>

				<p style="text-align:center;">Updated by <a href="https://skylar.tech" target="_blank">Skylar Sadlier</a></p>
			</div>

			<div id="alert-container"></div>
		</div>

		<div class="row">
			<div class="col-12">
				<div class="card">
					<div class="card-header">
						Connection Settings
					</div>
					<div class="card-body">
						<div class="row">
							<div class="form-group col-12">
								<label for="ha-url">Enter Home-Assistant URL</label>
								<input type="url" class="form-control" id="ha-url" aria-describedby="Home Assistant URL" placeholder="">
								<div id="ha-url-invalid" class="invalid-feedback" style="display:none;">
									URL must begin with either http:// or https://
								</div>
								<small class="form-text text-muted">Example: https://ha.example.com</small>
							</div>
							<div class="form-group col-12 mt-2">
								<label for="ha-token">Access Token</label>
								<input type="password" class="form-control" id="ha-token" placeholder="">
								<small class="form-text text-muted">You can obtain a token ("Long-Lived Access Token") by logging into the frontend using a web browser, and going to your profile.</small>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-12 mt-3">
				<div class="card">
					<div class="card-header">
						Voice Assistant Settings
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-12">
								<div class="form-check form-switch">
									<input class="form-check-input" type="checkbox" id="ha-voice-enabled">
									<label class="form-check-label" for="ha-voice-enabled">Enabled</label>
								</div>
								<div class="form-check form-switch">
									<input class="form-check-input" type="checkbox" id="ha-voice-confirm">
									<label class="form-check-label" for="ha-voice-confirm">Confirm dictation before sending</label>
								</div>
								<div class="form-group mt-3">
									<label for="ha-voice-font-size">Font Size</label>
									<select class="form-select" id="ha-voice-font-size">
										<option value="14">14px</option>
										<option value="18">18px</option>
										<option value="24">24px</option>
										<option value="28">28px</option>
									</select>
									<small class="form-text text-muted">Select the font size for the assistant conversation</small>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-12 mt-3">
				<div class="card">
					<div class="card-header">
						Entity Settings
					</div>
					<div class="card-body">
						<div class="row">
							<div class="form-group col-12">
								<label for="ha-filter">Entity Filter</label>
								<select class="form-select" aria-label="Entity Filter" id="ha-filter">
									<option value="all">Display all</option>
									<option value="specify">Specify entities</option>
								</select>
								<small class="form-text text-muted">Change what entities display</small>
							</div>

							<div class="form-group col-6 mt-2">
								<label for="ha-order-by">Order By</label>
								<select class="form-select" aria-label="Entity Filter" id="ha-order-by">
									<option value="attributes.friendly_name">Name</option>
									<option value="entity_id">Entity ID</option>
									<option value="attributes.last_updated">Last Updated</option>
								</select>
								<small class="form-text text-muted">Change how entities are sorted</small>
							</div>

							<div class="form-group col-6 mt-2">
								<label for="ha-order-dir">Order Direction</label>
								<select class="form-select" aria-label="Entity Filter" id="ha-order-dir">
									<option value="desc">Descending</option>
									<option value="asc">Ascending</option>
								</select>
								<small class="form-text text-muted">Change direction entities are sorted</small>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-12 mt-3">
				<div class="card">
					<div class="card-header">
						Domain Filters
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-12">
								<p>Domains listed here will be hidden from the interface</p>
							</div>
							<div class="col-8">
								<input type="text" class="form-control" id="domain-input" placeholder="Enter domain to ignore">
							</div>
							<div class="col-4">
								<button type="button" class="btn btn-primary" id="add-domain-btn">Add</button>
							</div>
						</div>
						<div class="row mt-3">
							<div class="col-12">
								<ul id="ignore-domains-list" class="list-group">
									<!-- Domains will be added here -->
								</ul>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="row" id="favorites-container" style="display:none;">
			<div class="col-12 mt-3">
				<div class="card">
					<div class="card-header">
						Favorite Entities
					</div>
					<div class="card-body">
						<div class="alert alert-info" role="alert">
							<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Info:"><use xlink:href="#info-fill"/></svg>
							Drag and drop items to reorder them
						</div>

						<ul id="favorites-sortable" class="list-group">
						</ul>
					</div>
				</div>
			</div>
		</div>

		<!-- New Timeline Section -->
		<div class="row" id="timeline-section" style="display:none;">
			<div class="col-12 mt-3">
				<div class="card">
					<div class="card-header">
						Timeline
					</div>
					<div class="card-body">
						<div class="row">
							<div class="col-12">
								<label for="timeline-token-display">Timeline Token</label>
								<div class="timeline-token" id="timeline-token-display" onclick="selectTimelineToken()"></div>
								<button type="button" class="btn btn-sm btn-outline-secondary" onclick="copyTimelineToken()">
									<i class="fa fa-clipboard"></i> Copy to Clipboard
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="col-12 mt-3 mb-3">
			<button type="button" class="btn btn-primary" id="save-btn">Save</button>
		</div>
	</form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.5/dist/umd/popper.min.js" integrity="sha384-Xe+8cL9oJa6tN/veChSP7q+mnSPaj5Bcu9mPX5F5xIGE0DVittaqT5lorf0EI7Vk" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.min.js" integrity="sha384-ODmDIVzN+pFdexxHEHFBQH3/9/vQ9uori45z4JjnFsRydbmQbmL5t1tQ0culUzyK" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
<script type="text/javascript">
	// Functions for Timeline Token
	function selectTimelineToken() {
		const tokenElement = document.getElementById('timeline-token-display');
		const selection = window.getSelection();
		const range = document.createRange();
		range.selectNodeContents(tokenElement);
		selection.removeAllRanges();
		selection.addRange(range);
	}

	function copyTimelineToken() {
		selectTimelineToken();
		document.execCommand('copy');
		// Show a temporary message
		const copyBtn = document.querySelector('#timeline-section button');
		const originalHTML = copyBtn.innerHTML;
		copyBtn.innerHTML = '<i class="fa fa-check"></i> Copied!';
		setTimeout(() => {
			copyBtn.innerHTML = originalHTML;
		}, 2000);
	}

	(function ($) {

		// Detect touch support
		$.support.touch = 'ontouchend' in document;

		// Ignore browsers without touch support
		if (!$.support.touch) {
			return;
		}

		var mouseProto = $.ui.mouse.prototype,
				_mouseInit = mouseProto._mouseInit,
				_mouseDestroy = mouseProto._mouseDestroy,
				touchHandled;

		/**
		 * Simulate a mouse event based on a corresponding touch event
		 * @param {Object} event A touch event
		 * @param {String} simulatedType The corresponding mouse event
		 */
		function simulateMouseEvent (event, simulatedType) {

			// Ignore multi-touch events
			if (event.originalEvent.touches.length > 1) {
				return;
			}

			event.preventDefault();

			var touch = event.originalEvent.changedTouches[0],
					simulatedEvent = document.createEvent('MouseEvents');

			// Initialize the simulated mouse event using the touch event's coordinates
			simulatedEvent.initMouseEvent(
					simulatedType,    // type
					true,             // bubbles
					true,             // cancelable
					window,           // view
					1,                // detail
					touch.screenX,    // screenX
					touch.screenY,    // screenY
					touch.clientX,    // clientX
					touch.clientY,    // clientY
					false,            // ctrlKey
					false,            // altKey
					false,            // shiftKey
					false,            // metaKey
					0,                // button
					null              // relatedTarget
			);

			// Dispatch the simulated event to the target element
			event.target.dispatchEvent(simulatedEvent);
		}

		/**
		 * Handle the jQuery UI widget's touchstart events
		 * @param {Object} event The widget element's touchstart event
		 */
		mouseProto._touchStart = function (event) {

			var self = this;

			// Ignore the event if another widget is already being handled
			if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
				return;
			}

			// Set the flag to prevent other widgets from inheriting the touch event
			touchHandled = true;

			// Track movement to determine if interaction was a click
			self._touchMoved = false;

			// Simulate the mouseover event
			simulateMouseEvent(event, 'mouseover');

			// Simulate the mousemove event
			simulateMouseEvent(event, 'mousemove');

			// Simulate the mousedown event
			simulateMouseEvent(event, 'mousedown');
		};

		/**
		 * Handle the jQuery UI widget's touchmove events
		 * @param {Object} event The document's touchmove event
		 */
		mouseProto._touchMove = function (event) {

			// Ignore event if not handled
			if (!touchHandled) {
				return;
			}

			// Interaction was not a click
			this._touchMoved = true;

			// Simulate the mousemove event
			simulateMouseEvent(event, 'mousemove');
		};

		/**
		 * Handle the jQuery UI widget's touchend events
		 * @param {Object} event The document's touchend event
		 */
		mouseProto._touchEnd = function (event) {

			// Ignore event if not handled
			if (!touchHandled) {
				return;
			}

			// Simulate the mouseup event
			simulateMouseEvent(event, 'mouseup');

			// Simulate the mouseout event
			simulateMouseEvent(event, 'mouseout');

			// If the touch interaction did not move, it should trigger a click
			if (!this._touchMoved) {

				// Simulate the click event
				simulateMouseEvent(event, 'click');
			}

			// Unset the flag to allow other widgets to inherit the touch event
			touchHandled = false;
		};

		/**
		 * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
		 * This method extends the widget with bound touch event handlers that
		 * translate touch events to mouse events and pass them to the widget's
		 * original mouse event handling methods.
		 */
		mouseProto._mouseInit = function () {

			var self = this;

			// Delegate the touch handlers to the widget's element
			self.element.bind({
				touchstart: $.proxy(self, '_touchStart'),
				touchmove: $.proxy(self, '_touchMove'),
				touchend: $.proxy(self, '_touchEnd')
			});

			// Call the original $.ui.mouse init method
			_mouseInit.call(self);
		};

		/**
		 * Remove the touch event handlers
		 */
		mouseProto._mouseDestroy = function () {

			var self = this;

			// Delegate the touch handlers to the widget's element
			self.element.unbind({
				touchstart: $.proxy(self, '_touchStart'),
				touchmove: $.proxy(self, '_touchMove'),
				touchend: $.proxy(self, '_touchEnd')
			});

			// Call the original $.ui.mouse destroy method
			_mouseDestroy.call(self);
		};

	})(jQuery);

	$(function() {
		let urlInput = $("#ha-url"),
				tokenInput = $('#ha-token'),
				filterInput = $('#ha-filter'),
				orderByInput = $('#ha-order-by'),
				orderDirInput = $('#ha-order-dir'),
				voiceEnabled = $('#ha-voice-enabled'),
				voiceConfirm = $('#ha-voice-confirm'),
				voiceFontSize = $('#ha-voice-font-size'),
				timelineSection = $('#timeline-section'),
				timelineTokenDisplay = $('#timeline-token-display'),
				domainInput = $('#domain-input'),
				addDomainBtn = $('#add-domain-btn'),
				ignoreDomainsDiv = $('#ignore-domains-list');

		if(window.applicationCache && window.applicationCache.addEventListener) {
			window.applicationCache.addEventListener('updateready', onUpdateReady);

			function onUpdateReady() {
				if(window.applicationCache.status === window.applicationCache.UPDATEREADY) {
					window.location.reload();
				}
			}
		}

		function getFormValues() {
			let values = {
				'ha_url': urlInput.val().replace(/\/+$/, ''),
				'token': tokenInput.val(),
				'filter': filterInput.val(),
				'order_by': orderByInput.val(),
				'order_dir': orderDirInput.val(),
				'voice_enabled': voiceEnabled.is(':checked'),
				'voice_confirm': voiceConfirm.is(':checked'),
				'voice_font_size': parseInt(voiceFontSize.val(), 10),
				'favorite_entities': $("#favorites-sortable li").map(function(a,b){
					return $(b).data('entity-id');
				}).toArray(),
				'ignore_domains': $("#ignore-domains-list li").map(function(a,b){
					return $(b).data('domain');
				}).toArray()
			};

			// Preserve timeline_token if it exists
			if (watch_config && watch_config.timeline_token) {
				values.timeline_token = watch_config.timeline_token;
			}

			return values;
		}

		function restoreFormValues() {
			let hash = window.location.hash.substring(1),
					favorites_container = $("#favorites-container"),
					favorites_sortable = $("#favorites-sortable");

			// Try to get config from hash first (for initial setup)
			if(hash) {
				try {
					watch_config = JSON.parse(decodeURIComponent(hash));
				} catch(e) {
					console.error("Error parsing hash config", e);
					watch_config = {};
				}
			} else {
				// Otherwise try localStorage (for returning visits)
				try {
					watch_config = JSON.parse(localStorage.getItem("watch_config")) || {};
				} catch(e) {
					console.error("Error parsing localStorage config", e);
					watch_config = {};
				}
			}

			if(watch_config['ha_url']) {
				urlInput.val(watch_config['ha_url']);
			}
			if(watch_config['token']) {
				tokenInput.val(watch_config['token']);
			}
			if(watch_config['filter']) {
				filterInput.val(watch_config['filter']);
			}
			if(watch_config['order_by']) {
				orderByInput.val(watch_config['order_by']);
			}
			if(watch_config['order_dir']) {
				orderDirInput.val(watch_config['order_dir']);
			}

			voiceEnabled.attr('checked', typeof watch_config['voice_enabled'] !== 'undefined' ? watch_config['voice_enabled'] : true);
			voiceConfirm.attr('checked', typeof watch_config['voice_confirm'] !== 'undefined' ? watch_config['voice_confirm'] : true);
			if (watch_config['voice_font_size']) {
				voiceFontSize.val(watch_config['voice_font_size']);
			} else {
				voiceFontSize.val('18'); // Default to 18px
			}

			if(watch_config['favorite_entities']) {
				let html = '';
				for(let entity_id of watch_config['favorite_entities']) {
					html += `
                        <li class="list-group-item" data-entity-id="${entity_id}">
                            <i class="fa fa-bars"></i>
                            <a href="javascript:void(0)" class="text-danger float-end remove-favorite"><i class="fa fa-trash"></i></a>
                            ${entity_id}
                        </li>`;
				}
				favorites_sortable
						.html(html)
						.sortable();

				favorites_sortable.disableSelection();

				$(".remove-favorite").on('click', function(e) {
					e.preventDefault();
					let parent = $(this).parent();
					if(confirm(`Are you sure you want to remove ${parent.data('entity-id')} from your favorites?`)) {
						parent.remove();
					}
				});

				favorites_container.show();
			}

			if(watch_config['ignore_domains'] && Array.isArray(watch_config['ignore_domains'])) {
				let html = '';
				for(let domain of watch_config['ignore_domains']) {
					html += `
            <li class="list-group-item" data-domain="${domain}">
                ${domain}
                <a href="javascript:void(0)" class="text-danger float-end remove-domain"><i class="fa fa-trash"></i></a>
            </li>`;
				}
				ignoreDomainsDiv.html(html);

				$(".remove-domain").on('click', function(e) {
					e.preventDefault();
					let parent = $(this).parent();
					if(confirm(`Are you sure you want to remove ${parent.data('domain')} from your ignore list?`)) {
						parent.remove();
					}
				});
			} else {
				// Display default domains if no custom ones are set
				let defaultDomains = ["assist_satellite", "tts"];
				let html = '';
				for(let domain of defaultDomains) {
					html += `
            <li class="list-group-item" data-domain="${domain}">
                ${domain}
                <a href="javascript:void(0)" class="text-danger float-end remove-domain"><i class="fa fa-trash"></i></a>
            </li>`;
				}
				ignoreDomainsDiv.html(html);

				$(".remove-domain").on('click', function(e) {
					e.preventDefault();
					let parent = $(this).parent();
					if(confirm(`Are you sure you want to remove ${parent.data('domain')} from your ignore list?`)) {
						parent.remove();
					}
				});
			}

			// Set up the timeline token section if it exists
			if(watch_config['timeline_token'] && typeof watch_config['timeline_token'] === 'string') {
				timelineTokenDisplay.text(watch_config['timeline_token']);
				timelineSection.show();
			}
		}

		function display_alert(type, content) {
			let container = $("#alert-container");

			if(!type && !content) {
				container.hide();
				return;
			}

			container
					.html(
							`<div class="alert alert-${type}" role="alert">
                        ${content}
                    </div>`)
					.show();
		}

		let watch_config;
		try {
			restoreFormValues();
		} catch(e) {
			console.error("Error in restoreFormValues", e);
			watch_config = {};
		}

		addDomainBtn.click(function(e) {
			e.preventDefault();
			let domain = domainInput.val().trim().toLowerCase();

			if(!domain) {
				return;
			}

			// Check if domain already exists
			let exists = false;
			$("#ignore-domains-list li").each(function() {
				if($(this).data('domain') === domain) {
					exists = true;
					return false;
				}
			});

			if(exists) {
				alert(`Domain "${domain}" is already in the ignore list.`);
				return;
			}

			// Add the domain to the list
			let newItem = $(`
        <li class="list-group-item" data-domain="${domain}">
            ${domain}
            <a href="javascript:void(0)" class="text-danger float-end remove-domain"><i class="fa fa-trash"></i></a>
        </li>`);

			newItem.find('.remove-domain').on('click', function(e) {
				e.preventDefault();
				if(confirm(`Are you sure you want to remove ${domain} from your ignore list?`)) {
					newItem.remove();
				}
			});

			ignoreDomainsDiv.append(newItem);
			domainInput.val('').focus();
		});

		filterInput.change(function(e){
			if($(this).val() == 'all') {

			} else {

			}
		});

		urlInput.keyup(function(e){
			let value = $(this).val();
			if(value && !value.startsWith('https://') && !value.startsWith('http://')) {
				$("#ha-url-invalid").show();
				urlInput.addClass('is-invalid');
			} else {
				$("#ha-url-invalid:visible").hide();
				urlInput.removeClass('is-invalid');
			}
		}).keyup();

		$('#save-btn').click(function(e) {
			e.preventDefault();
			display_alert();
			watch_config = getFormValues();

			if(!watch_config['ha_url']) {
				display_alert('danger', `<strong>Oops!</strong> Looks like you missed filling out your Home Assistant URL`);
				return;
			}

			if(!watch_config['token']) {
				display_alert('danger', `<strong>Oops!</strong> Looks like you missed filling out your Home Assistant Token`);
				return;
			}

			console.log(JSON.stringify(watch_config));
			let location = "pebblejs://close#" + encodeURIComponent(JSON.stringify(watch_config));
			localStorage.setItem("watch_config", JSON.stringify(watch_config));
			console.log(location);
			window.location.href = location;
		});
	});
</script>
</body>
</html>